{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"size\", \"style\"];\nimport React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from \"../../../hooks\";\nimport { getColor } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useTheme } from \"../../../hooks\";\nvar Spinner = function Spinner(props, ref) {\n  var _usePropsResolution = usePropsResolution('Spinner', props),\n    color = _usePropsResolution.color,\n    size = _usePropsResolution.size,\n    style = _usePropsResolution.style,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(ActivityIndicator, {\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\nexport default memo(forwardRef(Spinner));","map":{"version":3,"names":["React","memo","forwardRef","ActivityIndicator","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","_usePropsResolution","color","size","style","resolvedProps","_objectWithoutProperties","_excluded","resolvedColor","colors","resolvedStyle","createElement","accessible","accessibilityLabel"],"sources":["C:\\Users\\Aromolaran\\Downloads\\sosocare-app-master\\node_modules\\native-base\\lib\\module\\components\\primitives\\Spinner\\index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ActivityIndicator\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AAAA,OAAAC,iBAAA;AAEA,SACEC,kBADF,EAEEC,4BAFF;AAIA,SAASC,QAAT;AAEA,SAASC,qBAAT;AACA,SAASC,QAAT;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAD,EAAuBC,GAAvB,EAAoC;EAClD,IAAAC,mBAAA,GAAiDR,kBAAkB,CACjE,SADiE,EAEjEM,KAFiE,CAAnE;IAAQG,KAAF,GAAAD,mBAAA,CAAEC,KAAF;IAASC,IAAT,GAAAF,mBAAA,CAASE,IAAT;IAAeC,KAAf,GAAAH,mBAAA,CAAeG,KAAf;IAAyBC,aAAA,GAAAC,wBAAA,CAAAL,mBAAA,EAAAM,SAAA;EAI/B,IAAMC,aAAa,GAAGb,QAAQ,CAACO,KAAD,EAAQL,QAAQ,GAAGY,MAAnB,EAA2BZ,QAAQ,EAAnC,CAA9B;EACA,IAAMa,aAAa,GAAGhB,4BAA4B,CAACW,aAAD,CAAlD;EAEA,IAAIT,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACEV,KAAA,CAAAsB,aAAA,CAACnB,iBAAD;IACEoB,UAAU,MADZ;IAEEC,kBAAkB,EAAC,SAFrB;IAGEX,KAAK,EAAEM,aAHT;IAIER,GAAG,EAAEA,GAJP;IAKEG,IAAI,EAAEA,IALR;IAMEC,KAAK,EAAE,CAACM,aAAD,EAAgBN,KAAhB;EANT,EADF;AAUD,CArBD;AAuBA,eAAed,IAAI,CAACC,UAAU,CAACO,OAAD,CAAX,CAAnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}