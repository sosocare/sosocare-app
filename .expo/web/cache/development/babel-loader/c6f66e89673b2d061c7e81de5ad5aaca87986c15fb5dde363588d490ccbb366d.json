{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState = useState(initialColorMode),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorMode = _useState2[0],\n    setRawMode = _useState2[1];\n  var setColorMode = React.useCallback(function () {\n    var _ref = _asyncToGenerator(function* (val) {\n      if (colorModeManager) {\n        yield colorModeManager.set(val);\n      }\n      setRawMode(val);\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator(function* () {\n          var value = yield colorModeManager.get(initialColorMode);\n          if (value && value !== colorMode) {\n            setRawMode(value);\n          }\n        });\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"names":["React","useState","useEffect","HybridContext","useColorScheme","useColorMode","_React$useContext","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","_useColorMode","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_useState","_useState2","_slicedToArray","setRawMode","setColorMode","useCallback","_ref","_asyncToGenerator","val","set","_x","apply","arguments","_getMode","value","get","getMode","useAccessibleColors","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["C:\\Users\\Aromolaran\\Downloads\\sosocare-app-master\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { useColorScheme } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}