{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _ref = (0, $b3nuO$useControlledState)(props.value, props.defaultValue || [], props.onChange),\n    _ref2 = _slicedToArray(_ref, 2),\n    selectedValues = _ref2[0],\n    _setValue = _ref2[1];\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) _setValue(selectedValues.concat(value));\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));else _setValue(selectedValues.concat(value));\n    },\n    validationState: props.validationState\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"names":["$587d3ad58be6d31f$export$daff6da51032a415","props","arguments","length","undefined","_ref","$b3nuO$useControlledState","value","defaultValue","onChange","_ref2","_slicedToArray","selectedValues","setValue","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue","validationState"],"sources":["C:\\Users\\Aromolaran\\Downloads\\sosocare-app-master\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\index.ts","C:\\Users\\Aromolaran\\Downloads\\sosocare-app-master\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useCheckboxGroupState} from './useCheckboxGroupState';\n\nexport type {CheckboxGroupProps} from '@react-types/checkbox';\nexport type {CheckboxGroupState} from './useCheckboxGroupState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void,\n\n  /** The current validation state of the checkbox group. */\n  validationState: ValidationState\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    validationState: props.validationState\n  };\n\n  return state;\n}\n"],"mappings":";;ACiDO,SAASA,0CAAA,EAAoD;EAAA,IAA9BC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC,CAAC;EAClE,IAAAG,IAAA,GAAiC,IAAAC,yBAAiB,EAAEL,KAAA,CAAMM,KAAA,EAAON,KAAA,CAAMO,YAAA,IAAgB,EAAE,EAAEP,KAAA,CAAMQ,QAAA;IAAAC,KAAA,GAAAC,cAAA,CAAAN,IAAA;IAA5FO,cAAA,GAAAF,KAAA;IAAgBG,SAAA,GAAAH,KAAA;EAErB,IAAMI,KAAA,GAA4B;IAChCP,KAAA,EAAOK,cAAA;IACPC,QAAA,WAAAA,SAASN,KAAK;MACZ,IAAIN,KAAA,CAAMc,UAAA,IAAcd,KAAA,CAAMe,UAAA,EAC5B;MAGFH,SAAA,CAASN,KAAA;IACX;IACAS,UAAA,EAAYf,KAAA,CAAMe,UAAA,IAAc;IAChCD,UAAA,EAAYd,KAAA,CAAMc,UAAA,IAAc;IAChCE,UAAA,WAAAA,WAAWV,KAAK;MACd,OAAOK,cAAA,CAAeM,QAAA,CAASX,KAAA;IACjC;IACAY,QAAA,WAAAA,SAASZ,KAAK;MACZ,IAAIN,KAAA,CAAMc,UAAA,IAAcd,KAAA,CAAMe,UAAA,EAC5B;MAEF,IAAI,CAACJ,cAAA,CAAeM,QAAA,CAASX,KAAA,GAC3BM,SAAA,CAASD,cAAA,CAAeQ,MAAA,CAAOb,KAAA;IAEnC;IACAc,WAAA,WAAAA,YAAYd,KAAK;MACf,IAAIN,KAAA,CAAMc,UAAA,IAAcd,KAAA,CAAMe,UAAA,EAC5B;MAEF,IAAIJ,cAAA,CAAeM,QAAA,CAASX,KAAA,GAC1BM,SAAA,CAASD,cAAA,CAAeU,MAAA,CAAO,UAAAC,aAAA;QAAA,OAAiBA,aAAA,KAAkBhB,KAAA;MAAA;IAEtE;IACAiB,WAAA,WAAAA,YAAYjB,KAAK;MACf,IAAIN,KAAA,CAAMc,UAAA,IAAcd,KAAA,CAAMe,UAAA,EAC5B;MAEF,IAAIJ,cAAA,CAAeM,QAAA,CAASX,KAAA,GAC1BM,SAAA,CAASD,cAAA,CAAeU,MAAA,CAAO,UAAAC,aAAA;QAAA,OAAiBA,aAAA,KAAkBhB,KAAA;MAAA,SAElEM,SAAA,CAASD,cAAA,CAAeQ,MAAA,CAAOb,KAAA;IAEnC;IACAkB,eAAA,EAAiBxB,KAAA,CAAMwB;EACzB;EAEA,OAAOX,KAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}