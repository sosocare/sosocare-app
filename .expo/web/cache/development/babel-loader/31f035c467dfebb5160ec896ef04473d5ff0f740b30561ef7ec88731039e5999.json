{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { memo } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useBreakpointValue, useTheme, useToken } from \"../../../hooks\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function Hidden(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Hidden', props, {}, {\n      ignoreProps: ['only', 'platform']\n    }),\n    from = _usePropsResolution.from,\n    till = _usePropsResolution.till,\n    only = _usePropsResolution.only,\n    platform = _usePropsResolution.platform,\n    colorMode = _usePropsResolution.colorMode;\n  var _useTheme = useTheme(),\n    breakpoints = _useTheme.breakpoints;\n  var currentColorMode = useColorMode();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = useBreakpointValue(breakpointValueObject);\n  var _useToken = useToken('breakpoints', [breakpointValue]),\n    _useToken2 = _slicedToArray(_useToken, 1),\n    currentBreakpointValue = _useToken2[0];\n  var _useToken3 = useToken('breakpoints', [from]),\n    _useToken4 = _slicedToArray(_useToken3, 1),\n    fromBreakPointValue = _useToken4[0];\n  var _useToken5 = useToken('breakpoints', [till]),\n    _useToken6 = _slicedToArray(_useToken5, 1),\n    tillBreakPointValue = _useToken6[0];\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\nexport default memo(Hidden);","map":{"version":3,"names":["memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Platform","Hidden","_ref","children","props","_objectWithoutProperties","_excluded","_usePropsResolution","ignoreProps","from","till","only","platform","colorMode","_useTheme","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","_useToken","_useToken2","_slicedToArray","currentBreakpointValue","_useToken3","_useToken4","fromBreakPointValue","_useToken5","_useToken6","tillBreakPointValue","Array","isArray","includes","OS"],"sources":["C:\\Users\\Aromolaran\\Downloads\\sosocare-app-master\\node_modules\\native-base\\lib\\module\\components\\primitives\\Hidden\\index.tsx"],"sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}