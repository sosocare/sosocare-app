{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport React, { useState, useEffect } from 'react';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Paystack } from \"react-native-paystack-webview\";\nimport { useRoute } from '@react-navigation/native';\nimport { formatCurrency } from \"react-native-format-currency\";\nimport SelectField from \"../../../components/SelectField\";\nimport { TextField } from \"../../../components/TextField\";\nimport { ButtonWithTitle } from \"../../../components/ButtonWithTitle\";\nimport ErrorSheet from \"../../../components/ErrorSheet\";\nimport SuccessSheet from \"../../../components/SuccessSheet\";\nimport NoticeSheet from \"../../../components/NoticeSheet\";\nimport { COLORS, FONTS, SIZES } from \"../../../constants\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport * as Location from 'expo-location';\nimport { useNavigation } from \"@react-navigation/native\";\nimport axios from 'axios';\nimport { BASE_URL } from \"../../../utils\";\nimport { connect } from 'react-redux';\nimport { OnAgentBuyInsurance, OnGetPayStackKey } from \"../../../redux\";\nimport { NativeBaseProvider, extendTheme } from \"native-base\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar config = {\n  useSystemColorMode: false,\n  initialColorMode: \"light\"\n};\nexport var theme = extendTheme({\n  colors: {\n    primary: {\n      100: '#52A56E',\n      200: '#C6C6C6'\n    }\n  },\n  config: config\n});\nvar _BuyClientPlan = function _BuyClientPlan(props) {\n  var route = useRoute();\n  var _route$params = route.params,\n    client = _route$params.client,\n    plan = _route$params.plan;\n  var navigation = useNavigation();\n  var agentReducer = props.agentReducer,\n    OnAgentBuyInsurance = props.OnAgentBuyInsurance,\n    OnGetPayStackKey = props.OnGetPayStackKey;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    successMessage = _useState6[0],\n    setSuccessMessage = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    hasError = _useState8[0],\n    setHasError = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isSuccess = _useState10[0],\n    setIsSuccess = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasNotice = _useState12[0],\n    setHasNotice = _useState12[1];\n  var _useState13 = useState(''),\n    _useState14 = _slicedToArray(_useState13, 2),\n    noticeMessage = _useState14[0],\n    setNoticeMessage = _useState14[1];\n  var _useState15 = useState(''),\n    _useState16 = _slicedToArray(_useState15, 2),\n    email = _useState16[0],\n    setEmail = _useState16[1];\n  var _useState17 = useState(''),\n    _useState18 = _slicedToArray(_useState17, 2),\n    phone = _useState18[0],\n    setPhone = _useState18[1];\n  var keyboardVerticalOffset = Platform.OS === 'ios' ? 40 : 0;\n  var _useState19 = useState(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    totalAmount = _useState20[0],\n    setTotalAmount = _useState20[1];\n  var _useState21 = useState(0),\n    _useState22 = _slicedToArray(_useState21, 2),\n    paymentAmount = _useState22[0],\n    setPaymentAmount = _useState22[1];\n  var _useState23 = useState(\"1 month\"),\n    _useState24 = _slicedToArray(_useState23, 2),\n    duration = _useState24[0],\n    setDuration = _useState24[1];\n  var _useState25 = useState(false),\n    _useState26 = _slicedToArray(_useState25, 2),\n    payingWithPayStack = _useState26[0],\n    setPayingWithPayStack = _useState26[1];\n  var _useState27 = useState(''),\n    _useState28 = _slicedToArray(_useState27, 2),\n    paystackKey = _useState28[0],\n    setPaystackKey = _useState28[1];\n  var _useState29 = useState(false),\n    _useState30 = _slicedToArray(_useState29, 2),\n    verifying = _useState30[0],\n    setVerifying = _useState30[1];\n  var _useState31 = useState(),\n    _useState32 = _slicedToArray(_useState31, 2),\n    address = _useState32[0],\n    setAddress = _useState32[1];\n  var _useState33 = useState(''),\n    _useState34 = _slicedToArray(_useState33, 2),\n    addressState = _useState34[0],\n    setAddressState = _useState34[1];\n  var _useState35 = useState(''),\n    _useState36 = _slicedToArray(_useState35, 2),\n    city = _useState36[0],\n    setCity = _useState36[1];\n  var _useState37 = useState([]),\n    _useState38 = _slicedToArray(_useState37, 2),\n    cities = _useState38[0],\n    setCities = _useState38[1];\n  var _useState39 = useState(''),\n    _useState40 = _slicedToArray(_useState39, 2),\n    street = _useState40[0],\n    setStreet = _useState40[1];\n  var _useState41 = useState(\"Waiting for Current Location\"),\n    _useState42 = _slicedToArray(_useState41, 2),\n    displayAddress = _useState42[0],\n    setDisplayAddress = _useState42[1];\n  var _useState43 = useState([]),\n    _useState44 = _slicedToArray(_useState43, 2),\n    hospitals = _useState44[0],\n    setHospitals = _useState44[1];\n  var _useState45 = useState([]),\n    _useState46 = _slicedToArray(_useState45, 2),\n    optionsHospitals = _useState46[0],\n    setOptionsHospitals = _useState46[1];\n  var _useState47 = useState([]),\n    _useState48 = _slicedToArray(_useState47, 2),\n    pharmas = _useState48[0],\n    setPharmas = _useState48[1];\n  var _useState49 = useState([]),\n    _useState50 = _slicedToArray(_useState49, 2),\n    optionsPharmas = _useState50[0],\n    setOptionsPharmas = _useState50[1];\n  var _useState51 = useState(),\n    _useState52 = _slicedToArray(_useState51, 2),\n    activePharma = _useState52[0],\n    setActivePharma = _useState52[1];\n  var _useState53 = useState(),\n    _useState54 = _slicedToArray(_useState53, 2),\n    activeHospital = _useState54[0],\n    setActiveHospital = _useState54[1];\n  var clearError = function clearError() {\n    setHasError(false);\n  };\n  var handleSuccess = function () {\n    var _ref = _asyncToGenerator(function* () {\n      setIsSuccess(false);\n      navigation.navigate('ClientDetails', {\n        client: client\n      });\n    });\n    return function handleSuccess() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleNotice = function handleNotice() {\n    setHasNotice(false);\n    setLoading(false);\n  };\n  var durations = [{\n    title: \"1 month\",\n    value: \"1 month\"\n  }, {\n    title: \"2 months\",\n    value: \"2 months\"\n  }, {\n    title: \"3 months\",\n    value: \"3 months\"\n  }, {\n    title: \"4 months\",\n    value: \"4 months\"\n  }, {\n    title: \"5 months\",\n    value: \"5 months\"\n  }, {\n    title: \"6 months\",\n    value: \"6 months\"\n  }];\n  var methods = [{\n    title: \"Waste\",\n    value: \"Waste\"\n  }, {\n    title: \"Cash\",\n    value: \"Cash\"\n  }];\n  var PurchaseSchema = yup.object().shape({\n    duration: yup.string().required('Duration is required'),\n    payment_method: yup.string().required('Payment Method is required'),\n    amount: yup.string().required(),\n    centre: yup.string().required(`Preferred ${plan.name === 'Sosocare Basic Plan' ? 'Pharmacy' : 'Hospital'} is required`)\n  });\n  var handleSubmit = function () {\n    var _ref3 = _asyncToGenerator(function* (_ref2) {\n      var duration = _ref2.duration,\n        payment_method = _ref2.payment_method,\n        centre = _ref2.centre;\n      var selectedHosp;\n      var selectedPharma;\n      if (plan.name === 'Sosocare Basic Plan') {\n        var theOne = yield pharmas.find(function (item) {\n          return item.pharmacyCode === centre;\n        });\n        if (theOne) {\n          selectedPharma = theOne;\n          setActivePharma(theOne);\n        }\n      } else {\n        var _theOne = yield hospitals.find(function (item) {\n          return item.name === centre;\n        });\n        if (_theOne) {\n          selectedHosp = _theOne;\n          setActiveHospital(_theOne);\n        }\n      }\n      if (payment_method === 'Paystack') {\n        try {\n          setLoading(true);\n          var res = yield OnGetPayStackKey();\n          if (res.success) {\n            setPaystackKey(res.paystack_public);\n            setLoading(false);\n            setPayingWithPayStack(true);\n            return;\n          } else {\n            setLoading(false);\n            setError('Unable to connect to Paystack, kindly try another method');\n            setHasError(true);\n            return;\n          }\n        } catch (error) {\n          setLoading(false);\n          setError('Unable to connect to Paystack, kindly try another method');\n          setHasError(true);\n          return;\n        }\n      } else if (payment_method === 'Waste') {\n        console.log(\"Waste\");\n        setLoading(true);\n        try {\n          var _res = yield OnAgentBuyInsurance(plan._id, duration, payment_method, null, client._id, selectedHosp, selectedPharma);\n          if (_res.error) {\n            setError(_res.error);\n            setLoading(false);\n            setHasError(true);\n          }\n          if (_res.success) {\n            setLoading(false);\n            setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n            setIsSuccess(true);\n          }\n        } catch (e) {\n          setError(e);\n          setHasError(true);\n          setLoading(false);\n        }\n      } else if (payment_method === 'Cash') {\n        console.log(\"Cash\");\n        setLoading(true);\n        try {\n          var _res2 = yield OnAgentBuyInsurance(plan._id, duration, payment_method, null, client._id, selectedHosp, selectedPharma);\n          if (_res2.error) {\n            setError(_res2.error);\n            setLoading(false);\n            setHasError(true);\n          }\n          if (_res2.success) {\n            setLoading(false);\n            setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n            setIsSuccess(true);\n          }\n        } catch (e) {\n          setError(e);\n          setHasError(true);\n          setLoading(false);\n        }\n      }\n    });\n    return function handleSubmit(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handlePayError = function handlePayError() {\n    setLoading(false);\n    setPayingWithPayStack(false);\n    setError(\"Payment Error\");\n    setHasError(true);\n  };\n  var handlePayDone = function () {\n    var _ref4 = _asyncToGenerator(function* (reference) {\n      try {\n        setVerifying(true);\n        setLoading(false);\n        var res = yield OnAgentBuyInsurance(plan._id, duration, 'Paystack', reference, client._id, activeHospital, activePharma);\n        if (res.pending) {\n          setVerifying(false);\n          setLoading(false);\n          setPayingWithPayStack(false);\n          setHasNotice(true);\n          setNoticeMessage('Confirmation pending. Your Insurance will be activated once we confirm your payment');\n          return;\n        }\n        if (res.error) {\n          setVerifying(false);\n          setLoading(false);\n          setPayingWithPayStack(false);\n          setError(res.error);\n          setHasError(true);\n          return;\n        }\n        if (res.success) {\n          setVerifying(false);\n          setLoading(false);\n          setPayingWithPayStack(false);\n          setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n          setIsSuccess(true);\n          return;\n        }\n      } catch (error) {\n        setVerifying(false);\n        setLoading(false);\n        setPayingWithPayStack(false);\n        setError(error.message);\n        setHasError(true);\n        return;\n      }\n    });\n    return function handlePayDone(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var findHospitals = function () {\n    var _ref5 = _asyncToGenerator(function* (state, lga) {\n      try {\n        setLoading(true);\n        var configurationObject = {\n          method: 'post',\n          url: `${BASE_URL}hospitals`,\n          data: {\n            state: state ? state : addressState,\n            lga: lga ? lga : city\n          }\n        };\n        var response = yield axios(configurationObject);\n        var resBody = response.data;\n        if (resBody['status'] === 'error') {\n          setLoading(false);\n          setError(\"Error loading hospitals\");\n          setHasError(true);\n          return;\n        } else {\n          setHospitals(resBody.hospitals);\n          var thisHosps = [];\n          for (var i = 0; i < resBody.hospitals.length; i++) {\n            var hops = resBody.hospitals[i];\n            thisHosps.push({\n              title: `${hops.name}`,\n              value: hops.name\n            });\n          }\n          setOptionsHospitals(thisHosps);\n          setLoading(false);\n          return;\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(error.message);\n        setHasError(true);\n        return;\n      }\n    });\n    return function findHospitals(_x3, _x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var findPharmas = function () {\n    var _ref6 = _asyncToGenerator(function* (state, lga) {\n      try {\n        setLoading(true);\n        var configurationObject = {\n          method: 'post',\n          url: `${BASE_URL}pharmacies`,\n          data: {\n            state: state ? state : addressState,\n            lga: lga ? lga : city\n          }\n        };\n        var response = yield axios(configurationObject);\n        var resBody = response.data;\n        if (resBody['status'] === 'error') {\n          setLoading(false);\n          setError(\"Error loading pharmacies\");\n          setHasError(true);\n          return;\n        } else {\n          setPharmas(resBody.pharmacies);\n          var thisPhams = [];\n          for (var i = 0; i < resBody.pharmacies.length; i++) {\n            var pharm = resBody.pharmacies[i];\n            thisPhams.push({\n              title: `${pharm.pharmacyName}: ${pharm.address}`,\n              value: pharm.pharmacyCode\n            });\n          }\n          setOptionsPharmas(thisPhams);\n          setLoading(false);\n          return;\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(error.message);\n        setHasError(true);\n        return;\n      }\n    });\n    return function findPharmas(_x5, _x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var mounted = true;\n    _asyncToGenerator(function* () {\n      if (!mounted) {\n        return;\n      }\n      var _formatCurrency = formatCurrency({\n          amount: plan.price / 100,\n          code: \"USD\"\n        }),\n        _formatCurrency2 = _slicedToArray(_formatCurrency, 3),\n        incomeValueFormattedWithSymbol = _formatCurrency2[0],\n        incomeValueFormattedWithoutSymbol = _formatCurrency2[1],\n        incomeSymbol = _formatCurrency2[2];\n      setTotalAmount(incomeValueFormattedWithoutSymbol);\n      setPhone(client.phone);\n      setEmail(client.email || '');\n      var existingLocation = agentReducer.location;\n      if (existingLocation.address_city && existingLocation.address_state) {\n        setAddress({\n          region: existingLocation.address_state,\n          city: existingLocation.address_city,\n          street: existingLocation.address_street,\n          district: '',\n          country: existingLocation.address_country,\n          streetNumber: '',\n          subregion: '',\n          postalCode: existingLocation.address_zipcode,\n          name: '',\n          isoCountryCode: '',\n          timezone: ''\n        });\n        setAddressState(existingLocation.address_state);\n        setCity(existingLocation.address_city);\n        setStreet(existingLocation.address_street || '');\n        if (plan.name === \"Sosocare Basic Plan\") {\n          yield findPharmas(existingLocation.address_state, existingLocation.address_city);\n        } else if (plan.name === \"Sosocare Silver Plan\") {\n          yield findHospitals(existingLocation.address_state, existingLocation.address_city);\n        } else {\n          yield findPharmas(existingLocation.address_state, existingLocation.address_city);\n          yield findHospitals(existingLocation.address_state, existingLocation.address_city);\n        }\n        return;\n      }\n      if (addressState && addressState !== '') return;\n      setLoading(true);\n      try {\n        if (!mounted) {\n          return;\n        }\n        var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n          status = _yield$Location$reque.status;\n        if (status !== 'granted') {\n          setError('Permission to access location is not granted');\n          setHasError(true);\n          setLoading(false);\n        }\n        var location = yield Location.getCurrentPositionAsync({});\n        var coords = location.coords;\n        if (coords) {\n          if (!mounted) {\n            return;\n          }\n          var latitude = coords.latitude,\n            longitude = coords.longitude;\n          var addressResponse = yield Location.reverseGeocodeAsync({\n            latitude: latitude,\n            longitude: longitude\n          });\n          var region = \"\";\n          var lga = \"\";\n          for (var item of addressResponse) {\n            setLoading(false);\n            setAddress(item);\n            var currentAddress = `${item.name},${item.street}, ${item.postalCode}, ${item.country}`;\n            setDisplayAddress(currentAddress);\n            setAddressState(item.region);\n            setCity(item.city);\n            setStreet(item.street);\n            region = item.region;\n            lga = item.city;\n            return;\n          }\n          if (plan.name === \"Sosocare Basic Plan\") {\n            yield findPharmas(region, lga);\n          } else if (plan.name === \"Sosocare Silver Plan\") {\n            yield findHospitals(region, lga);\n          } else {\n            yield findPharmas(region, lga);\n            yield findHospitals(region, lga);\n          }\n          setLoading(false);\n        } else {\n          setError(\"Could't get location automatically\");\n          setHasError(true);\n          setLoading(false);\n        }\n      } catch (error) {\n        if (!mounted) {\n          return;\n        }\n        setError(error.message);\n        setHasError(true);\n        setLoading(false);\n      }\n    })();\n    return function () {\n      mounted = false;\n    };\n  }, []);\n  useEffect(function () {\n    var mounted = true;\n    _asyncToGenerator(function* () {\n      if (!mounted) {\n        return;\n      }\n      var multiplier = parseInt(duration.charAt(0));\n      var totalPrice = plan.price * multiplier;\n      setPaymentAmount(totalPrice / 100 * 100 / 100);\n      var _formatCurrency3 = formatCurrency({\n          amount: totalPrice / 100,\n          code: \"USD\"\n        }),\n        _formatCurrency4 = _slicedToArray(_formatCurrency3, 3),\n        incomeValueFormattedWithSymbol = _formatCurrency4[0],\n        incomeValueFormattedWithoutSymbol = _formatCurrency4[1],\n        incomeSymbol = _formatCurrency4[2];\n      setTotalAmount(incomeValueFormattedWithoutSymbol);\n    })();\n    return function () {\n      mounted = false;\n    };\n  }, [duration]);\n  if (verifying) {\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'white'\n      },\n      children: [_jsx(ActivityIndicator, {\n        size: 'large'\n      }), _jsx(Text, {\n        style: {\n          marginTop: 10,\n          textAlign: 'center',\n          fontSize: SIZES.large,\n          fontFamily: FONTS.semiBold,\n          color: COLORS.pallete_deep\n        },\n        children: \"Verifying transaction\"\n      })]\n    });\n  } else if (payingWithPayStack) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'white'\n      },\n      children: _jsx(Paystack, {\n        paystackKey: paystackKey,\n        amount: paymentAmount,\n        billingMobile: phone,\n        billingEmail: email,\n        onCancel: function onCancel(e) {\n          handlePayError();\n        },\n        onSuccess: function onSuccess(res) {\n          handlePayDone(res.transactionRef.reference);\n        },\n        autoStart: true\n      })\n    });\n  } else {\n    return _jsxs(NativeBaseProvider, {\n      theme: theme,\n      children: [_jsx(SafeAreaView, {\n        style: {\n          backgroundColor: 'white'\n        }\n      }), _jsx(KeyboardAwareScrollView, {\n        extraScrollHeight: keyboardVerticalOffset,\n        style: {\n          flex: 1,\n          width: '100%',\n          backgroundColor: 'white'\n        },\n        children: _jsxs(View, {\n          style: {\n            width: '100%',\n            height: '100%',\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          children: [_jsx(View, {\n            style: styles.container,\n            children: _jsxs(View, {\n              style: styles.formContainer,\n              children: [_jsxs(Text, {\n                style: _objectSpread({}, styles.headingText),\n                children: [plan.ussd_name, \" for \", client.first_name, \" \", client.last_name]\n              }), _jsx(Text, {\n                style: _objectSpread({}, styles.subHeadingText),\n                children: \"Select Duration and Method of Payment\"\n              }), _jsx(View, {\n                style: styles.form,\n                children: _jsx(Formik, {\n                  initialValues: {\n                    duration: \"1 month\",\n                    payment_method: \"Waste\",\n                    amount: totalAmount,\n                    centre: \"\"\n                  },\n                  onSubmit: function onSubmit(values) {\n                    handleSubmit(values);\n                  },\n                  validationSchema: PurchaseSchema,\n                  children: function children(_ref9) {\n                    var errors = _ref9.errors,\n                      touched = _ref9.touched,\n                      _handleChange = _ref9.handleChange,\n                      handleSubmit = _ref9.handleSubmit,\n                      values = _ref9.values;\n                    return _jsxs(View, {\n                      style: {\n                        width: '100%'\n                      },\n                      children: [_jsx(Text, {\n                        style: styles.label,\n                        children: \"Duration\"\n                      }), _jsx(SelectField, {\n                        hasIcon: false,\n                        label: \"Duration\",\n                        handleChange: function handleChange(val) {\n                          _handleChange('duration')(val);\n                          setDuration(val);\n                        },\n                        options: durations,\n                        isDisabled: true,\n                        value: values.duration\n                      }), errors.duration && touched.duration ? _jsx(Text, {\n                        style: styles.errorText,\n                        children: errors.duration\n                      }) : null, _jsx(Text, {\n                        style: styles.label,\n                        children: \"Payment Method\"\n                      }), _jsx(SelectField, {\n                        hasIcon: false,\n                        label: \"Payment Method\",\n                        handleChange: _handleChange('payment_method'),\n                        options: methods,\n                        isDisabled: false,\n                        value: values.payment_method\n                      }), errors.payment_method && touched.payment_method ? _jsx(Text, {\n                        style: styles.errorText,\n                        children: errors.payment_method\n                      }) : null, _jsx(Text, {\n                        style: styles.label,\n                        children: \"Total Amount\"\n                      }), _jsx(TextField, {\n                        isNumber: true,\n                        prefix: \"\\u20A6\",\n                        label: \"Amount\",\n                        isSecure: false,\n                        isDisabled: true,\n                        handleChange: _handleChange('amount'),\n                        value: `${totalAmount.toString()} / ${plan.waste_price / 1000} KG`\n                      }), plan.name === \"Sosocare Basic Plan\" && _jsxs(View, {\n                        children: [_jsx(Text, {\n                          style: styles.label,\n                          children: \"Preferred Pharmacy\"\n                        }), _jsx(SelectField, {\n                          hasIcon: false,\n                          label: \"Preferred Pharmacy\",\n                          handleChange: _handleChange('centre'),\n                          options: optionsPharmas,\n                          isDisabled: loading ? true : pharmas.length < 1 ? true : false\n                        }), errors.centre && touched.centre ? _jsx(Text, {\n                          style: styles.errorText,\n                          children: errors.centre\n                        }) : null]\n                      }), plan.name === \"Sosocare Silver Plan\" && _jsxs(View, {\n                        children: [_jsx(Text, {\n                          style: styles.label,\n                          children: \"Preferred Hospital\"\n                        }), _jsx(SelectField, {\n                          hasIcon: false,\n                          label: \"Preferred Hospital\",\n                          handleChange: _handleChange('centre'),\n                          options: optionsHospitals,\n                          isDisabled: loading ? true : hospitals.length < 1 ? true : false\n                        }), errors.centre && touched.centre ? _jsx(Text, {\n                          style: styles.errorText,\n                          children: errors.centre\n                        }) : null]\n                      }), _jsx(ButtonWithTitle, {\n                        loading: loading,\n                        noBg: false,\n                        title: 'Pay',\n                        backgroundColor: COLORS.primary,\n                        color: COLORS.white,\n                        onTap: handleSubmit,\n                        width: '100%'\n                      })]\n                    });\n                  }\n                })\n              })]\n            })\n          }), _jsx(SuccessSheet, {\n            message: successMessage,\n            open: isSuccess,\n            closed: handleSuccess\n          }), _jsx(ErrorSheet, {\n            error: error,\n            open: hasError,\n            closed: clearError\n          }), _jsx(NoticeSheet, {\n            message: noticeMessage,\n            open: hasNotice,\n            closed: handleNotice\n          })]\n        })\n      }), _jsx(SafeAreaView, {\n        style: {\n          backgroundColor: '#fefefe'\n        }\n      })]\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  insuranceContainer: {\n    width: '100%',\n    backgroundColor: COLORS.primary,\n    borderRadius: 15,\n    paddingTop: 30,\n    paddingBottom: 10,\n    marginBottom: 20,\n    paddingHorizontal: 18,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    borderTopEndRadius: 15,\n    elevation: 5,\n    shadowColor: 'rgb(230, 235, 243)',\n    shadowOffset: {\n      width: 4,\n      height: 12\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 10\n  },\n  insuranceHeading: {\n    fontSize: SIZES.medium,\n    fontFamily: FONTS.semiBold,\n    color: COLORS.white,\n    marginBottom: 18\n  },\n  formContainer: {\n    flex: 5,\n    width: '100%',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    marginTop: 30\n  },\n  form: {\n    width: '100%',\n    flexDirection: 'column'\n  },\n  label: {\n    fontSize: SIZES.medium,\n    fontFamily: FONTS.semiBold,\n    color: COLORS.gray,\n    marginBottom: 10\n  },\n  insurancePlan: {\n    fontSize: SIZES.extraLarge,\n    fontFamily: FONTS.semiBold,\n    color: COLORS.white,\n    marginBottom: 6\n  },\n  container: {\n    flex: 1,\n    width: '100%',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fefefe',\n    paddingHorizontal: 24,\n    marginBottom: 60\n  },\n  imageBg: {\n    resizeMode: 'cover',\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headingText: {\n    fontFamily: FONTS.semiBold,\n    fontSize: SIZES.heading,\n    color: COLORS.dark,\n    marginBottom: SIZES.font,\n    textAlign: 'center'\n  },\n  errorText: {\n    fontSize: 14,\n    fontFamily: FONTS.medium,\n    color: COLORS.negative,\n    marginTop: -26,\n    marginBottom: 10\n  },\n  subHeadingText: {\n    fontFamily: FONTS.medium,\n    fontSize: SIZES.medium,\n    color: COLORS.gray,\n    marginBottom: 20,\n    textAlign: 'center'\n  }\n});\nvar mapToStateProps = function mapToStateProps(state) {\n  return {\n    agentReducer: state.AgentReducer\n  };\n};\nvar BuyClientPlan = connect(mapToStateProps, {\n  OnAgentBuyInsurance: OnAgentBuyInsurance,\n  OnGetPayStackKey: OnGetPayStackKey\n})(_BuyClientPlan);\nexport default BuyClientPlan;","map":{"version":3,"names":["React","useState","useEffect","KeyboardAwareScrollView","Paystack","useRoute","formatCurrency","SelectField","TextField","ButtonWithTitle","ErrorSheet","SuccessSheet","NoticeSheet","COLORS","FONTS","SIZES","Formik","yup","Location","useNavigation","axios","BASE_URL","connect","OnAgentBuyInsurance","OnGetPayStackKey","NativeBaseProvider","extendTheme","jsx","_jsx","jsxs","_jsxs","config","useSystemColorMode","initialColorMode","theme","colors","primary","_BuyClientPlan","props","route","_route$params","params","client","plan","navigation","agentReducer","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","successMessage","setSuccessMessage","_useState7","_useState8","hasError","setHasError","_useState9","_useState10","isSuccess","setIsSuccess","_useState11","_useState12","hasNotice","setHasNotice","_useState13","_useState14","noticeMessage","setNoticeMessage","_useState15","_useState16","email","setEmail","_useState17","_useState18","phone","setPhone","keyboardVerticalOffset","Platform","OS","_useState19","_useState20","totalAmount","setTotalAmount","_useState21","_useState22","paymentAmount","setPaymentAmount","_useState23","_useState24","duration","setDuration","_useState25","_useState26","payingWithPayStack","setPayingWithPayStack","_useState27","_useState28","paystackKey","setPaystackKey","_useState29","_useState30","verifying","setVerifying","_useState31","_useState32","address","setAddress","_useState33","_useState34","addressState","setAddressState","_useState35","_useState36","city","setCity","_useState37","_useState38","cities","setCities","_useState39","_useState40","street","setStreet","_useState41","_useState42","displayAddress","setDisplayAddress","_useState43","_useState44","hospitals","setHospitals","_useState45","_useState46","optionsHospitals","setOptionsHospitals","_useState47","_useState48","pharmas","setPharmas","_useState49","_useState50","optionsPharmas","setOptionsPharmas","_useState51","_useState52","activePharma","setActivePharma","_useState53","_useState54","activeHospital","setActiveHospital","clearError","handleSuccess","_ref","_asyncToGenerator","navigate","apply","arguments","handleNotice","durations","title","value","methods","PurchaseSchema","object","shape","string","required","payment_method","amount","centre","name","handleSubmit","_ref3","_ref2","selectedHosp","selectedPharma","theOne","find","item","pharmacyCode","res","success","paystack_public","console","log","_id","e","_x","handlePayError","handlePayDone","_ref4","reference","pending","message","_x2","findHospitals","_ref5","state","lga","configurationObject","method","url","data","response","resBody","thisHosps","i","length","hops","push","_x3","_x4","findPharmas","_ref6","pharmacies","thisPhams","pharm","pharmacyName","_x5","_x6","mounted","_formatCurrency","price","code","_formatCurrency2","incomeValueFormattedWithSymbol","incomeValueFormattedWithoutSymbol","incomeSymbol","existingLocation","location","address_city","address_state","region","address_street","district","country","address_country","streetNumber","subregion","postalCode","address_zipcode","isoCountryCode","timezone","_yield$Location$reque","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","coords","latitude","longitude","addressResponse","reverseGeocodeAsync","currentAddress","multiplier","parseInt","charAt","totalPrice","_formatCurrency3","_formatCurrency4","View","style","flex","justifyContent","alignItems","backgroundColor","children","ActivityIndicator","size","Text","marginTop","textAlign","fontSize","large","fontFamily","semiBold","color","pallete_deep","billingMobile","billingEmail","onCancel","onSuccess","transactionRef","autoStart","SafeAreaView","extraScrollHeight","width","height","styles","container","formContainer","_objectSpread","headingText","ussd_name","first_name","last_name","subHeadingText","form","initialValues","onSubmit","values","validationSchema","_ref9","errors","touched","handleChange","label","hasIcon","val","options","isDisabled","errorText","isNumber","prefix","isSecure","toString","waste_price","noBg","white","onTap","open","closed","StyleSheet","create","insuranceContainer","borderRadius","paddingTop","paddingBottom","marginBottom","paddingHorizontal","flexDirection","borderTopEndRadius","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","insuranceHeading","medium","gray","insurancePlan","extraLarge","imageBg","resizeMode","heading","dark","font","negative","mapToStateProps","AgentReducer","BuyClientPlan"],"sources":["C:/Users/Aromolaran/Downloads/sosocare-app-master/src/screens/agent/clients/BuyPlan.tsx"],"sourcesContent":["import { View, Text, Platform, SafeAreaView, StyleSheet, ActivityIndicator } from 'react-native';\nimport React, { useState, useEffect } from 'react';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { Paystack } from \"react-native-paystack-webview\";\nimport { ConfirmPlanScreenRouteProp, ClientScreenNavigationProp } from \"../../../navigation/agent/types\";\nimport { useRoute } from '@react-navigation/native';\nimport { formatCurrency } from \"react-native-format-currency\";\n\nimport SelectField from \"../../../components/SelectField\";\nimport { TextField } from \"../../../components/TextField\";\nimport { ButtonWithTitle } from \"../../../components/ButtonWithTitle\";\nimport ErrorSheet from \"../../../components/ErrorSheet\";\nimport SuccessSheet from \"../../../components/SuccessSheet\";\nimport NoticeSheet from \"../../../components/NoticeSheet\";\n\nimport { COLORS, FONTS, SIZES } from '../../../constants';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport * as Location from 'expo-location';\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport axios from 'axios';\nimport { BASE_URL } from '../../../utils';\n\nimport { connect } from 'react-redux';\nimport { ApplicationState, AgentState, OnAgentBuyInsurance, OnGetPayStackKey, LocationModel } from '../../../redux';\nimport {\n    NativeBaseProvider,\n    extendTheme,\n} from \"native-base\";\n// Define the config\nconst config = {\n    useSystemColorMode: false,\n    initialColorMode: \"light\",\n};\n\n// extend the theme\nexport const theme = extendTheme({\n    colors: {\n        primary: {\n            100: '#52A56E',\n            200: '#C6C6C6'\n        }\n    },\n    config\n});\ntype MyThemeType = typeof theme;\ndeclare module \"native-base\" {\n    interface ICustomTheme extends MyThemeType { }\n}\n\ninterface BuyClientPlanProps {\n    agentReducer: AgentState;\n    OnAgentBuyInsurance: Function;\n    OnGetPayStackKey: Function;\n}\n\ninterface HospitalModel {\n    name: string;\n    address: string;\n}\n\ninterface PharmaModel {\n    pharmacyCode: string;\n    pharmacyName: string;\n    state: string;\n    lga: string;\n    address: string;\n}\ninterface SelectPharmaModel {\n    title: string;\n    value: string;\n}\ninterface SelectHospitalModel {\n    title: string;\n    value: string;\n}\n\nconst _BuyClientPlan: React.FC<BuyClientPlanProps> = (props) => {\n    const route = useRoute<ConfirmPlanScreenRouteProp>();\n    const { client, plan } = route.params;\n    const navigation = useNavigation<ClientScreenNavigationProp>();\n    const { agentReducer, OnAgentBuyInsurance, OnGetPayStackKey } = props;\n\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n    const [hasError, setHasError] = useState(false);\n    const [isSuccess, setIsSuccess] = useState(false);\n    const [hasNotice, setHasNotice] = useState(false);\n    const [noticeMessage, setNoticeMessage] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const keyboardVerticalOffset = Platform.OS === 'ios' ? 40 : 0;\n    const [totalAmount, setTotalAmount] = useState(0);\n    const [paymentAmount, setPaymentAmount] = useState(0);\n    const [duration, setDuration] = useState(\"1 month\");\n    const [payingWithPayStack, setPayingWithPayStack] = useState(false);\n    const [paystackKey, setPaystackKey] = useState('');\n    const [verifying, setVerifying] = useState(false);\n\n    const [address, setAddress] = useState<Location.LocationGeocodedAddress>();\n    const [addressState, setAddressState] = useState('');\n    const [city, setCity] = useState('');\n    const [cities, setCities] = useState([]);\n    const [street, setStreet] = useState('');\n    const [displayAddress, setDisplayAddress] = useState(\"Waiting for Current Location\");\n\n    const [hospitals, setHospitals] = useState<Array<HospitalModel>>([]);\n    const [optionsHospitals, setOptionsHospitals] = useState<Array<SelectHospitalModel>>([]);\n    const [pharmas, setPharmas] = useState<Array<PharmaModel>>([]);\n    const [optionsPharmas, setOptionsPharmas] = useState<Array<SelectPharmaModel>>([]);\n    const [activePharma, setActivePharma] = useState<PharmaModel>();\n    const [activeHospital, setActiveHospital] = useState<HospitalModel>();\n\n    const clearError = () => {\n        setHasError(false);\n    };\n    const handleSuccess = async () => {\n        setIsSuccess(false);\n        navigation.navigate('ClientDetails', { client });\n    };\n    const handleNotice = () => {\n        setHasNotice(false);\n        setLoading(false);\n    };\n\n    const durations = [\n        { title: \"1 month\", value: \"1 month\" },\n        { title: \"2 months\", value: \"2 months\" },\n        { title: \"3 months\", value: \"3 months\" },\n        { title: \"4 months\", value: \"4 months\" },\n        { title: \"5 months\", value: \"5 months\" },\n        { title: \"6 months\", value: \"6 months\" },\n    ];\n    const methods = [\n        { title: \"Waste\", value: \"Waste\" },\n        { title: \"Cash\", value: \"Cash\" },\n        // { title: \"Paystack\", value: \"Paystack\" }\n    ];\n    const PurchaseSchema = yup.object().shape({\n        duration: yup.string().required('Duration is required'),\n        payment_method: yup.string().required('Payment Method is required'),\n        amount: yup.string().required(),\n        centre: yup.string().required(`Preferred ${plan.name === 'Sosocare Basic Plan' ? 'Pharmacy' : 'Hospital'} is required`),\n    });\n\n    const handleSubmit = async ({ duration, payment_method, centre }) => {\n        let selectedHosp: HospitalModel | undefined;\n        let selectedPharma: PharmaModel | undefined;\n        if (plan.name === 'Sosocare Basic Plan') {\n            let theOne = await pharmas.find((item) => item.pharmacyCode === centre);\n            if (theOne) {\n                selectedPharma = theOne;\n                setActivePharma(theOne);\n            }\n        } else {\n            let theOne = await hospitals.find((item) => item.name === centre);\n            if (theOne) {\n                selectedHosp = theOne;\n                setActiveHospital(theOne);\n            }\n        }\n        if (payment_method === 'Paystack') {\n            try {\n                setLoading(true);\n                let res = await OnGetPayStackKey();\n                if (res.success) {\n                    setPaystackKey(res.paystack_public);\n                    setLoading(false);\n                    setPayingWithPayStack(true);\n                    return;\n                } else {\n                    setLoading(false);\n                    setError('Unable to connect to Paystack, kindly try another method');\n                    setHasError(true);\n                    return;\n                }\n            } catch (error) {\n                setLoading(false);\n                setError('Unable to connect to Paystack, kindly try another method');\n                setHasError(true);\n                return;\n            }\n        } else if (payment_method === 'Waste') {\n            console.log(\"Waste\")\n            // return\n            setLoading(true);\n            try {\n                let res = await OnAgentBuyInsurance(plan._id, duration, payment_method, null, client._id, selectedHosp, selectedPharma);\n                if (res.error) {\n                    setError(res.error);\n                    setLoading(false);\n                    setHasError(true);\n                }\n                if (res.success) {\n                    setLoading(false);\n                    setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n                    setIsSuccess(true);\n                }\n\n            } catch (e) {\n                setError(e);\n                setHasError(true);\n                setLoading(false);\n            }\n        }else if (payment_method === 'Cash') {\n            console.log(\"Cash\")\n            // return\n            setLoading(true);\n            try {\n                let res = await OnAgentBuyInsurance(plan._id, duration, payment_method, null, client._id, selectedHosp, selectedPharma);\n                if (res.error) {\n                    setError(res.error);\n                    setLoading(false);\n                    setHasError(true);\n                }\n                if (res.success) {\n                    setLoading(false);\n                    setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n                    setIsSuccess(true);\n                }\n\n            } catch (e) {\n                setError(e);\n                setHasError(true);\n                setLoading(false);\n            }\n        }\n\n\n    };\n\n    const handlePayError = () => {\n        setLoading(false);\n        setPayingWithPayStack(false);\n        setError(\"Payment Error\");\n        setHasError(true);\n    };\n    const handlePayDone = async (reference) => {\n        try {\n            setVerifying(true);\n            setLoading(false);\n\n            let res = await OnAgentBuyInsurance(plan._id, duration, 'Paystack', reference, client._id, activeHospital, activePharma);\n            if (res.pending) {\n                setVerifying(false);\n                setLoading(false);\n                setPayingWithPayStack(false);\n                setHasNotice(true);\n                setNoticeMessage('Confirmation pending. Your Insurance will be activated once we confirm your payment');\n                return;\n            }\n            if (res.error) {\n                setVerifying(false);\n                setLoading(false);\n                setPayingWithPayStack(false);\n                setError(res.error);\n                setHasError(true);\n                return;\n            }\n            if (res.success) {\n                setVerifying(false);\n                setLoading(false);\n                setPayingWithPayStack(false);\n                setSuccessMessage('Congratulations, you now have Insurance cover at all of our partner facilities.');\n                setIsSuccess(true);\n                return;\n            }\n        } catch (error) {\n            setVerifying(false);\n            setLoading(false);\n            setPayingWithPayStack(false);\n            setError(error.message);\n            setHasError(true);\n            return;\n        }\n\n    };\n\n    const findHospitals = async (state, lga) => {\n        try {\n            setLoading(true);\n            const configurationObject = {\n                method: 'post',\n                url: `${BASE_URL}hospitals`,\n                data: {\n                    state: state ? state : addressState,\n                    lga: lga ? lga : city\n                }\n            };\n            const response = await axios(configurationObject);\n            let resBody = response.data;\n\n            if (resBody['status'] === 'error') {\n                setLoading(false);\n                setError(\"Error loading hospitals\");\n                setHasError(true);\n                return;\n            } else {\n                setHospitals(resBody.hospitals);\n                let thisHosps: SelectHospitalModel[] = [];\n                for (let i = 0; i < resBody.hospitals.length; i++) {\n                    let hops: HospitalModel = resBody.hospitals[i];\n                    thisHosps.push({\n                        title: `${hops.name}`,\n                        value: hops.name\n                    });\n                }\n                setOptionsHospitals(thisHosps);\n                setLoading(false);\n                return;\n\n            }\n        } catch (error) {\n            setLoading(false);\n            setError(error.message);\n            setHasError(true);\n            return;\n        }\n    };\n\n    const findPharmas = async (state, lga) => {\n        try {\n            setLoading(true);\n            const configurationObject = {\n                method: 'post',\n                url: `${BASE_URL}pharmacies`,\n                data: {\n                    state: state ? state : addressState,\n                    lga: lga ? lga : city\n                }\n            };\n            const response = await axios(configurationObject);\n\n            let resBody = response.data;\n            // console.log(\"pharmacies: \",state, lga, response.data)\n            if (resBody['status'] === 'error') {\n                setLoading(false);\n                setError(\"Error loading pharmacies\");\n                setHasError(true);\n                return;\n            } else {\n                setPharmas(resBody.pharmacies);\n                let thisPhams: SelectPharmaModel[] = [];\n                for (let i = 0; i < resBody.pharmacies.length; i++) {\n                    let pharm: PharmaModel = resBody.pharmacies[i];\n                    thisPhams.push({\n                        title: `${pharm.pharmacyName}: ${pharm.address}`,\n                        value: pharm.pharmacyCode\n                    });\n                }\n                setOptionsPharmas(thisPhams);\n                setLoading(false);\n                return;\n\n            }\n        } catch (error) {\n            setLoading(false);\n            setError(error.message);\n            setHasError(true);\n            return;\n        }\n    };\n\n    useEffect(() => {\n        let mounted = true;\n        (async () => {\n            if (!mounted) {\n                return;\n            }\n\n            const [incomeValueFormattedWithSymbol, incomeValueFormattedWithoutSymbol, incomeSymbol] = formatCurrency({ amount: plan.price / 100, code: \"USD\" });\n            setTotalAmount(incomeValueFormattedWithoutSymbol);\n            setPhone(client.phone);\n            setEmail(client.email || '');\n\n            let existingLocation: LocationModel = agentReducer.location;\n            if (existingLocation.address_city && existingLocation.address_state) {\n                setAddress({\n                    region: existingLocation.address_state,\n                    city: existingLocation.address_city,\n                    street: existingLocation.address_street,\n                    district: '',\n                    country: existingLocation.address_country,\n                    streetNumber: '',\n                    subregion: '',\n                    postalCode: existingLocation.address_zipcode,\n                    name: '',\n                    isoCountryCode: '',\n                    timezone: ''\n                });\n                setAddressState(existingLocation.address_state);\n                setCity(existingLocation.address_city);\n                setStreet(existingLocation.address_street || '');\n                if (plan.name === \"Sosocare Basic Plan\") {\n                    await findPharmas(existingLocation.address_state, existingLocation.address_city);\n                } else if (plan.name === \"Sosocare Silver Plan\") {\n                    await findHospitals(existingLocation.address_state, existingLocation.address_city);\n                } else {\n                    await findPharmas(existingLocation.address_state, existingLocation.address_city);\n                    await findHospitals(existingLocation.address_state, existingLocation.address_city);\n                }\n                return;\n            }\n            if (addressState && addressState !== '') return;\n            setLoading(true);\n            try {\n                if (!mounted) {\n                    return;\n                }\n                let { status } = await Location.requestForegroundPermissionsAsync();\n\n                if (status !== 'granted') {\n                    setError('Permission to access location is not granted');\n                    setHasError(true);\n                    setLoading(false);\n                }\n\n                let location: any = await Location.getCurrentPositionAsync({});\n\n                const { coords } = location;\n\n                if (coords) {\n                    if (!mounted) {\n                        return;\n                    }\n                    const { latitude, longitude } = coords;\n\n                    let addressResponse: any = await Location.reverseGeocodeAsync({ latitude, longitude });\n                    let region = \"\";\n                    let lga = \"\";\n                    for (let item of addressResponse) {\n                        setLoading(false);\n                        setAddress(item);\n                        // onUpdateLocation(item)\n                        let currentAddress = `${item.name},${item.street}, ${item.postalCode}, ${item.country}`;\n                        setDisplayAddress(currentAddress);\n                        setAddressState(item.region);\n                        setCity(item.city);\n                        setStreet(item.street);\n                        region = item.region;\n                        lga = item.city;\n                        return;\n                    }\n\n                    if (plan.name === \"Sosocare Basic Plan\") {\n                        await findPharmas(region, lga);\n                    } else if (plan.name === \"Sosocare Silver Plan\") {\n                        await findHospitals(region, lga);\n                    } else {\n                        await findPharmas(region, lga);\n                        await findHospitals(region, lga);\n                    }\n                    setLoading(false);\n                } else {\n                    //notify user something went wrong with location\n                    setError(\"Could't get location automatically\");\n                    setHasError(true);\n                    setLoading(false);\n                }\n\n            } catch (error) {\n                if (!mounted) {\n                    return;\n                }\n                setError(error.message);\n                setHasError(true);\n                setLoading(false);\n            }\n\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n\n    useEffect(() => {\n        let mounted = true;\n        (async () => {\n            if (!mounted) {\n                return;\n            }\n            let multiplier = parseInt(duration.charAt(0));\n            let totalPrice = plan.price * multiplier;\n            setPaymentAmount(((totalPrice / 100) * 100) / 100);\n            const [incomeValueFormattedWithSymbol, incomeValueFormattedWithoutSymbol, incomeSymbol] = formatCurrency({ amount: totalPrice / 100, code: \"USD\" });\n            setTotalAmount(incomeValueFormattedWithoutSymbol);\n        })();\n\n        return () => {\n            mounted = false;\n        };\n    }, [duration]);\n\n    if (verifying) {\n        return (\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'white' }}>\n                <ActivityIndicator size={'large'} />\n                <Text\n                    style={{\n                        marginTop: 10,\n                        textAlign: 'center',\n                        fontSize: SIZES.large,\n                        fontFamily: FONTS.semiBold,\n                        color: COLORS.pallete_deep\n                    }}\n                >\n                    Verifying transaction\n                </Text>\n            </View>\n        );\n    } else if (payingWithPayStack) {\n        return (\n            <View style={{ flex: 1, backgroundColor: 'white' }}>\n                <Paystack\n                    paystackKey={paystackKey}\n                    amount={paymentAmount}\n                    billingMobile={phone}\n                    billingEmail={email}\n                    onCancel={(e) => {\n                        handlePayError();\n                        // handle response here\n                    }}\n                    onSuccess={(res) => {\n                        handlePayDone(res.transactionRef.reference);\n                        // handle response here\n                    }}\n                    autoStart={true}\n                />\n            </View>);\n    } else {\n        return (\n            <NativeBaseProvider theme={theme}>\n                <SafeAreaView style={{ backgroundColor: 'white' }} />\n                <KeyboardAwareScrollView extraScrollHeight={keyboardVerticalOffset} style={{ flex: 1, width: '100%', backgroundColor: 'white' }}>\n                    <View style={{ width: '100%', height: '100%', flex: 1, justifyContent: 'center', alignItems: 'center' }} >\n                        <View style={styles.container}>\n                            <View style={styles.formContainer}>\n                                <Text style={{ ...styles.headingText }}>{plan.ussd_name} for {client.first_name} {client.last_name}</Text>\n                                <Text style={{ ...styles.subHeadingText }}>\n                                    Select Duration and Method of Payment\n                                </Text>\n                                <View style={styles.form}>\n                                    <Formik\n                                        initialValues={{\n                                            duration: \"1 month\",\n                                            payment_method: \"Waste\",\n                                            amount: totalAmount,\n                                            centre: \"\"\n                                        }}\n                                        onSubmit={values => {\n                                            handleSubmit(values);\n                                        }}\n                                        validationSchema={PurchaseSchema}\n                                    >\n                                        {({ errors, touched, handleChange, handleSubmit, values }) => (\n                                            <View style={{ width: '100%' }}>\n                                                <Text style={styles.label}>Duration</Text>\n                                                <SelectField\n                                                    hasIcon={false}\n                                                    label='Duration'\n                                                    handleChange={(val) => {\n                                                        handleChange('duration')(val);\n                                                        setDuration(val);\n                                                    }}\n                                                    options={durations}\n                                                    isDisabled={true}\n                                                    value={values.duration}\n                                                />\n                                                {errors.duration && touched.duration ? <Text style={styles.errorText}>{errors.duration}</Text> : null}\n                                                <Text style={styles.label}>Payment Method</Text>\n                                                <SelectField\n                                                    hasIcon={false}\n                                                    label='Payment Method'\n                                                    handleChange={handleChange('payment_method')}\n                                                    options={methods}\n                                                    isDisabled={false}\n                                                    value={values.payment_method}\n                                                />\n                                                {errors.payment_method && touched.payment_method ? <Text style={styles.errorText}>{errors.payment_method}</Text> : null}\n                                                <Text style={styles.label}>Total Amount</Text>\n                                                <TextField\n                                                    isNumber={true}\n                                                    prefix={'\\u20A6'}\n                                                    label='Amount'\n                                                    isSecure={false}\n                                                    isDisabled={true}\n                                                    handleChange={handleChange('amount')}\n                                                    value={`${totalAmount.toString()} / ${plan.waste_price/1000} KG`}\n                                                />\n                                                {plan.name === \"Sosocare Basic Plan\" && (<View>\n                                                    <Text style={styles.label}>Preferred Pharmacy</Text>\n                                                    <SelectField\n                                                        hasIcon={false}\n                                                        label='Preferred Pharmacy'\n                                                        handleChange={handleChange('centre')}\n                                                        options={optionsPharmas}\n                                                        isDisabled={loading ? true : pharmas.length < 1 ? true : false}\n                                                    />\n                                                    {errors.centre && touched.centre ? <Text style={styles.errorText}>{errors.centre}</Text> : null}\n                                                </View>)}\n                                                {plan.name === \"Sosocare Silver Plan\" && (<View>\n                                                    <Text style={styles.label}>Preferred Hospital</Text>\n                                                    <SelectField\n                                                        hasIcon={false}\n                                                        label='Preferred Hospital'\n                                                        handleChange={handleChange('centre')}\n                                                        options={optionsHospitals}\n                                                        isDisabled={loading ? true : hospitals.length < 1 ? true : false}\n                                                    />\n                                                    {errors.centre && touched.centre ? <Text style={styles.errorText}>{errors.centre}</Text> : null}\n                                                </View>)}\n                                                <ButtonWithTitle loading={loading} noBg={false} title={'Pay'} backgroundColor={COLORS.primary} color={COLORS.white} onTap={handleSubmit} width={'100%'} />\n                                            </View>\n                                        )}\n                                    </Formik>\n                                </View>\n                            </View>\n                        </View>\n                        <SuccessSheet message={successMessage} open={isSuccess} closed={handleSuccess} />\n                        <ErrorSheet error={error} open={hasError} closed={clearError} />\n                        <NoticeSheet message={noticeMessage} open={hasNotice} closed={handleNotice} />\n                    </View>\n                </KeyboardAwareScrollView>\n                <SafeAreaView style={{ backgroundColor: '#fefefe' }} />\n            </NativeBaseProvider>\n        );\n    }\n};\n\nconst styles = StyleSheet.create({\n    insuranceContainer: {\n        width: '100%',\n        backgroundColor: COLORS.primary,\n        borderRadius: 15,\n        paddingTop: 30,\n        paddingBottom: 10,\n        marginBottom: 20,\n        paddingHorizontal: 18,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        borderTopEndRadius: 15,\n        elevation: 5,\n        shadowColor: 'rgb(230, 235, 243)',\n        shadowOffset: { width: 4, height: 12 },\n        shadowOpacity: 0.5,\n        shadowRadius: 10\n    },\n    insuranceHeading: {\n        fontSize: SIZES.medium,\n        fontFamily: FONTS.semiBold,\n        color: COLORS.white,\n        marginBottom: 18\n    },\n    formContainer: {\n        flex: 5,\n        width: '100%',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        marginTop: 30\n    },\n    form: {\n        width: '100%',\n        flexDirection: 'column',\n    },\n    label: {\n        fontSize: SIZES.medium,\n        fontFamily: FONTS.semiBold,\n        color: COLORS.gray,\n        marginBottom: 10\n    },\n    insurancePlan: {\n        fontSize: SIZES.extraLarge,\n        fontFamily: FONTS.semiBold,\n        color: COLORS.white,\n        marginBottom: 6\n    },\n    container: {\n        flex: 1,\n        width: '100%',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#fefefe',\n        paddingHorizontal: 24,\n        marginBottom: 60\n    },\n    imageBg: {\n        resizeMode: 'cover',\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    headingText: {\n        fontFamily: FONTS.semiBold,\n        fontSize: SIZES.heading,\n        color: COLORS.dark,\n        marginBottom: SIZES.font,\n        textAlign: 'center'\n    },\n    errorText: {\n        fontSize: 14,\n        fontFamily: FONTS.medium,\n        color: COLORS.negative,\n        marginTop: -26,\n        marginBottom: 10,\n    },\n    subHeadingText: {\n        fontFamily: FONTS.medium,\n        fontSize: SIZES.medium,\n        color: COLORS.gray,\n        marginBottom: 20,\n        textAlign: 'center'\n    },\n});\n\nconst mapToStateProps = (state: ApplicationState) => ({\n    agentReducer: state.AgentReducer\n});\n\nconst BuyClientPlan = connect(mapToStateProps, { OnAgentBuyInsurance, OnGetPayStackKey })(_BuyClientPlan);\nexport default BuyClientPlan;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}